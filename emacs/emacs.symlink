;; -*- mode: emacs-lisp -*-

;; note: in order for flyspell to work, aspell must be installed
;; $ brew install aspell --lang=en
;; NOTE: still having issues with flyspell -- need to investigate

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

;; Add in your own as you wish:
(defvar my-packages '(starter-kit color-theme color-theme-solarized
                      clojure-mode find-file-in-project gist paredit
                      idle-highlight-mode magit org org-magit pyflakes
                      pylint python-mode python-pep8 ruby-mode yaml-mode
                      markdown-mode textmate find-things-fast coffee-mode
                      nrepl scss-mode highlight-indentation)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; read in PATH from .bash_profile
(if (not (getenv "TERM_PROGRAM"))
  (setenv "PATH"
    (shell-command-to-string "source $HOME/.bash_profile && printf $PATH")))

;; start a single emacs server
(server-start)

;; use a small font size for MBP Retina
(set-face-attribute 'default nil :height 100)

(require 'color-theme)
(require 'color-theme-solarized)
(setq color-theme-is-global nil)
(color-theme-solarized-light)

;; Enable mouse support in terminal.
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                            (interactive)
                            (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                            (interactive)
                            (scroll-up 1)))
(defun track-mouse (e))
(setq mouse-sel-mode t)

;; Enable cua mode, but only for rectangles.
;; (C-RET will start a rectangular selection.)
(setq cua-enable-cua-keys nil)
(cua-mode t)

;; Display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

;; Use textmate minor mode, but don't use textmate's 'textmate-goto-file
;; binding.
(require 'textmate)
(define-key *textmate-mode-map* [(super t)] nil)
(textmate-mode)

;; Use find-things-fast instead.
(global-set-key [(super t)] 'ftf-find-file)

;; Keybindings for window resize.
(global-set-key (kbd "<C-S-left>") 'shrink-window-horizontally)
(global-set-key (kbd "<C-S-right>") 'enlarge-window-horizontally)

(global-set-key (kbd "C-`") 'switch-to-buffer)
(global-set-key (kbd "C--") 'switch-to-prev-buffer)
(global-set-key (kbd "C-=") 'switch-to-next-buffer)
(global-set-key (kbd "C-0") 'kill-buffer)

;; Disable line highlighting.
(remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)

;; use clojure-mode to edit ClojureScript files
(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode))

;; nrepl
(require 'nrepl)
(setq nrepl-popup-stacktraces nil)
(add-hook 'nrepl-mode-hook
          (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'nrepl-interaction-mode-hook
          'nrepl-turn-on-eldoc-mode)

;; ansi term
(defvar terms '())
(defun open-ansi-term ()
  (interactive)
  (let* ((name (read-from-minibuffer "Name: "))
         (term-buffer-assoc (assoc name terms))
         (term-buffer (nth 1 term-buffer-assoc))
         (term-name (buffer-name term-buffer))
         (term-exists (and term-buffer term-name)))
    (if term-exists
      (switch-to-buffer term-buffer)
      (let* ((term-buffer (ansi-term (getenv "SHELL") name))
             (new-assoc '())
             (new-assoc (cons term-buffer new-assoc))
             (new-assoc (cons name new-assoc))
             (new-terms (cons new-assoc terms)))
        (setq terms new-terms)))))
(global-set-key (kbd "C-1") 'open-ansi-term)
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))

;; Set the default fill column width to 79.
(setq-default fill-column 79)

;; indentation highlighting
(require 'highlight-indentation)
(setq-default highlight-indent-offset 4)

;; set indentation in coffee mode
(defun coffee-spec-highlight ()
  (highlight-phrase "describe" "hi-yellow")
  (highlight-phrase "it" "hi-blue-b")
  (highlight-phrase "before" "hi-green")
  (highlight-phrase "after" "hi-green")
  (highlight-phrase "beforeEach" "hi-green")
  (highlight-phrase "afterEach" "hi-green"))

(defun coffee-custom ()
  (make-local-variable 'tab-width)
  (set 'tab-width 2)
  (if (string-match "_spec.coffee$" (buffer-file-name))
      (coffee-spec-highlight)))
(add-hook 'coffee-mode-hook 'coffee-custom)

;; disable automatic scss compilation
(setq scss-compile-at-save nil)

;; configure the file extensions used by markdown mode
(setq auto-mode-alist
  (cons '("\\.md" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
    (cons '("\\.mdown" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
  (cons '("\\.markdown" . markdown-mode) auto-mode-alist))

;; Use visual line mode by default for markdown files.
(add-hook 'markdown-mode-hook 'turn-off-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

;; Use visual line mode by default for org files.
(add-hook 'org-mode-hook 'turn-off-auto-fill)
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)

;; Disable the visible notification (note: this seems to activate the audible
;; bell).
(setq visible-bell nil)

;; reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))

;; move point from window to window using shift and the arrow keys
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Use org-indent-mode by default
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)

;; display trailing whitespace
(setq-default show-trailing-whitespace t)

;; automatically delete trailing whitespace
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;; do not scroll dramatically when moving one line at a time
(setq-default scroll-conservatively 1)
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 5)))

;; Enable the menu bar
(menu-bar-mode t)

;; Show column numbers
(setq column-number-mode t)

;; Setup the frame.
(split-window-right)
(split-window-right)
(balance-windows)
(ns-toggle-fullscreen)
