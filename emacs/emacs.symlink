;; -*- mode: emacs-lisp -*-

;; note: in order for flyspell to work, aspell must be installed
;; $ brew install aspell --lang=en
;; NOTE: still having issues with flyspell -- need to investigate

(message "Loading .emacs...")

(require 'package)


(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages
  '(bm
    clojure-mode
    coffee-mode
    color-theme
    color-theme-library
    color-theme-solarized
    expand-region
    find-file-in-project
    find-things-fast
    fountain-mode
    gist
    haml-mode
    highlight-indentation
    idle-highlight-mode
    json-mode
    magit
    markdown-mode
    multi-web-mode
    nrepl
    org
    paredit
    pyflakes
    pylint
    python-mode
    python-pep8
    ruby-mode
    scss-mode
    starter-kit
    stylus-mode
    textmate
    yaml-mode)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))


;; Now that the packages are on the `load-path`, require them.
(require 'bm)
(require 'color-theme)
(require 'color-theme-library)
(require 'color-theme-solarized)
(require 'expand-region)
(require 'fountain-mode)
(require 'highlight-indentation)
(require 'mouse)
(require 'multi-web-mode)
(require 'textmate)
(require 'server)
(require 'vc)


;; Read in PATH from `.bash_profile`.
(if (not (getenv "TERM_PROGRAM"))
  (setenv "PATH"
    (shell-command-to-string "source $HOME/.bash_profile && printf $PATH")))
(setq exec-path (append exec-path '("/usr/local/bin")))


;; Start a single emacs server.
(if (not (server-running-p))
    (progn
      (message "Emacs server not started, starting one...")
      (server-start))
    (message "Emacs server already started."))


;; Set the font size to 10pt. Note for presentations, 16pt is a good size.
(set-face-attribute 'default nil :height 100)


;; Some nice colour themes.
;; (color-theme-solarized-dark)
(color-theme-molokai)


;; Enable mouse support in terminal.
;;
;; Note `window-system` is `nil` when in a terminal, and "ns" when in a Cocoa
;; frame.
(if (not window-system)
    (progn
      (xterm-mouse-mode t)
      (global-set-key [mouse-4]
       '(lambda ()
          (interactive)
          (scroll-down 1)))
      (global-set-key [mouse-5]
       '(lambda ()
          (interactive)
          (scroll-up 1)))
      (defun track-mouse (e))
      (setq mouse-sel-mode t)))


;; Do not scroll dramatically when moving one line at a time.
(setq-default scroll-conservatively 1)
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 5)))


;; Display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)


;; Use textmate minor mode, and set custom file/directory exclusion regex for
;; use by `textmate-goto-file` (which is bound to `super-t`).
(textmate-mode)
(setq *textmate-gf-exclude*
      (concat
       "(/|^)"
       "(\\.+[^/]+"
       "|vendor"
       "|fixtures"
       "|tmp"
       "|log"
       "|classes"
       "|build"
       "|eggs"
       "|develop-eggs"
       "|git-eggs"
       "|node_modules"
       ")($|/)"
       "|(\\.xcodeproj"
       "|\\.nib"
       "|\\.framework"
       "|\\.app"
       "|\\.pbproj"
       "|\\.pbxproj"
       "|\\.xcode"
       "|\\.xcodeproj"
       "|\\.bundle"
       "|\\.pyc"
       "|\\.egg-info"
       "|\\.DS_Store"
       ")(/|$)"))

;; Alternate file finder for super-t using ftf (find things fast).
;; (define-key *textmate-mode-map* [(super t)] nil)
;; (global-set-key [(super t)] 'ftf-find-file)


;; Configuration for multi-web-mode.
(setq mweb-default-major-mode 'html-mode)
(setq mweb-filename-extensions '("html"))
(setq mweb-tags
  '((js-mode
     "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>"
     "</script>")
    (handlebars-mode
     "<script +\\(type=\"text/handlebars\"\\|language=\"handlebars\"\\)[^>]*>"
     "</script>")
    (coffee-mode
     "<script +\\(type=\"text/coffeescript\"\\|language=\"coffeescript\"\\)[^>]*>"
     "</script>")
    (css-mode
     "<style +type=\"text/css\"[^>]*>"
     "</style>")))
(multi-web-global-mode 1)


;; Enable fountain-mode
(add-to-list 'auto-mode-alist '("\\.fountain$" . fountain-mode))




;; Some useful commands/keybindings for navigating within regions, particularly
;; quoted regions.
(defun contract-region ()
  (interactive)
  (er/expand-region -1))
(defun mark-outside-quotes ()
  (interactive)
  (er/mark-inside-quotes)
  (er/expand-region))
(defun goto-next-quote ()
  (interactive)
  (forward-char)
  (search-forward-regexp "[\"\|']")
  (backward-char))
(defun goto-previous-quote ()
  (interactive)
  (search-backward-regexp "[\"\|']"))
(global-set-key (kbd "M-[") 'contract-region)
(global-set-key (kbd "M-]") 'er/expand-region)
(global-set-key (kbd "M-'") 'er/mark-inside-quotes)
(global-set-key (kbd "M-\"") 'mark-outside-quotes)
(global-set-key (kbd "C-'") 'goto-next-quote)
(global-set-key (kbd "C-;") 'goto-previous-quote)


;; Set up bookmark (bm, https://github.com/joodland/bm).

(setq bm-cycle-all-buffers nil)

(defun bm-navigate-all (direction)
  (let ((is-cycling-all bm-cycle-all-buffers))
    (setq bm-cycle-all-buffers t)
    (funcall direction)
    (setq bm-cycle-all-buffers is-cycling-all)
    ))

(defun bm-previous-all ()
  "Navigate the bookmarks across all buffers in the reverse
direction. This temporarily ignores the `bm-cycle-all-buffers`
option."
  (interactive)
  (bm-navigate-all 'bm-previous))

(defun bm-next-all ()
  "Navigate the bookmarks across all buffers in the forward
direction. This temporarily ignores the `bm-cycle-all-buffers`
option."
  (interactive)
  (bm-navigate-all 'bm-next))

(global-set-key (kbd "M-0") 'bm-toggle)
(global-set-key (kbd "M--") 'bm-previous)
(global-set-key (kbd "M-=") 'bm-next)
(global-set-key (kbd "M-_") 'bm-previous-all)
(global-set-key (kbd "M-+") 'bm-next-all)


(defun flush-buffer-history ()
  "Clear the list of recent files that were opened. When this
list is cleared, ido's buffer list will no longer list recently
opened buffers."
  (interactive)
  (setq recentf-list '()))

;; Window management
(defvar resize-mode-keymap (make-keymap) "resize mode keymap")
(define-key resize-mode-keymap (kbd "<left>") 'shrink-window-horizontally)
(define-key resize-mode-keymap (kbd "<right>") 'enlarge-window-horizontally)
(define-key resize-mode-keymap (kbd "<down>") 'shrink-window)
(define-key resize-mode-keymap (kbd "<up>") 'enlarge-window)
(define-minor-mode resize-mode "something"
  :group 'window-management
  :init-value nil
  :lighter " resize"
  :keymap resize-mode-keymap)


;; Buffer management
(global-set-key (kbd "C-`") 'switch-to-buffer)
(global-set-key (kbd "C--") 'switch-to-prev-buffer)
(global-set-key (kbd "C-=") 'switch-to-next-buffer)
(global-set-key (kbd "C-0") 'kill-this-buffer)

;; Disable line highlighting.
(remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)

;; Turn off line numbers in the gutter and make the left and right fringes
;; smaller.
(global-linum-mode 0)
(setq linum-format " %d ")
(set-fringe-style `(2 . 4)) ;; `(left-margin-in-px right-margin-in-px)

;; use clojure-mode to edit ClojureScript files
(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode))

;; Setup for ansi-term.
(add-hook 'term-mode-hook
          (lambda ()
            (setq show-trailing-whitespace nil)))
(add-hook 'term-exec-hook
          (lambda ()
            (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)))

;; Turn off line wrapping.
(set-default 'truncate-lines t)
(setq truncate-partial-width-windows nil) ;; This is needed to work for
                                          ;; vertically split windows.

;; Set the default fill column width to 79.
(setq-default fill-column 79)

;; indentation highlighting
(highlight-indentation-set-offset 2)

;; Keybinding for phrase highlighting.
(global-set-key (kbd "M-p") 'highlight-phrase)

;; Additional key bindings for navigating buffers quickly.
(global-set-key (kbd "C-,") 'backward-paragraph)
(global-set-key (kbd "C-.") 'forward-paragraph)
(global-set-key (kbd "C-/") 'exchange-point-and-mark)

;; Set indendation to 2 spaces for javascript and coffee script modes.
(setq js-indent-level 2)
(custom-set-variables '(coffee-tab-width 2))

;; disable automatic scss compilation
(setq scss-compile-at-save nil)

;; configure the file extensions used by markdown mode
(setq auto-mode-alist
  (cons '("\\.md" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
    (cons '("\\.mdown" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
  (cons '("\\.markdown" . markdown-mode) auto-mode-alist))

;; Use visual line mode by default for markdown files.
(add-hook 'markdown-mode-hook 'turn-off-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

;; Use visual line mode by default for org files.
(add-hook 'org-mode-hook 'turn-off-auto-fill)
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)

;; Disable the visible notification (note: this seems to activate the audible
;; bell).
(setq visible-bell nil)

;; reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))

;; move point from window to window using shift and the arrow keys
(global-set-key (kbd "s-<right>") 'windmove-right)
(global-set-key (kbd "s-<left>") 'windmove-left)
(global-set-key (kbd "s-<up>") 'windmove-up)
(global-set-key (kbd "s-<down>") 'windmove-down)


;; Use org-indent-mode by default
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)

;; display trailing whitespace
(setq-default show-trailing-whitespace t)

;; automatically delete trailing whitespace
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;; To enable the menu bar, set menu-bar-mode to `t`.
;; (menu-bar-mode t)

;; Enable `dired-find-alternate-file`. If enabled, pressing the key `a` will
;; replace the existing dired buffer instead of starting a new buffer.
(put 'dired-find-alternate-file 'disabled nil)


;; Show column numbers.
(setq column-number-mode t)


(message "Finished loading .emacs...")
