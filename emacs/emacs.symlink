;; -*- mode: emacs-lisp -*-

(message "Loading .emacs...")

(require 'package)

;; Add some package repositories.
(add-to-list
 'package-archives
 '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list
 'package-archives
 '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; Initialize package system.
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages
  '(bm
    clojure-mode
    coffee-mode
    color-theme
    color-theme-library
    color-theme-molokai
    color-theme-monokai
    color-theme-solarized
    expand-region
    fill-column-indicator
    find-file-in-project
    find-things-fast
    flx
    flx-ido
    fountain-mode
    gist
    git-gutter
    git-gutter-fringe
    haml-mode
    highlight-indentation
    hlinum
    idle-highlight-mode
    json-mode
    magit
    markdown-mode
    multi-web-mode
    multiple-cursors
    nrepl
    olivetti
    org
    paredit
    perspective
    persp-projectile
    projectile
    pyflakes
    pylint
    python-mode
    python-pep8
    rich-minority
    ruby-mode
    scss-mode
    starter-kit
    stylus-mode
    swift-mode
    yaml-mode)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; Now that the packages are on the `load-path`, require them.
(require 'bm)
(require 'color-theme)
(require 'color-theme-library)
(require 'color-theme-solarized)
(require 'expand-region)
(require 'fill-column-indicator)
(require 'fountain-mode)
(require 'git-gutter-fringe)
(require 'highlight-indentation)
(require 'mouse)
(require 'multi-web-mode)
(require 'multiple-cursors)
(require 'persp-projectile)
(require 'rich-minority)
(require 'server)
(require 'smart-mode-line)
(require 'textmate)
(require 'vc)

;; Read in PATH from `.bash_profile`.
(if (not (getenv "TERM_PROGRAM"))
  (setenv "PATH"
    (shell-command-to-string "source $HOME/.bash_profile && printf $PATH")))
(setq exec-path (append exec-path '("/usr/local/bin")))

;; Start a single emacs server.
(if (not (server-running-p))
    (progn
      (message "Emacs server not started, starting one...")
      (server-start))
    (message "Emacs server already started."))

;; Set the font size to 10pt. Note for presentations, 16pt is a good size.
(set-face-attribute 'default nil :height 100)

;; Some nice colour themes.
;; (color-theme-solarized-dark)
(color-theme-molokai)

;; Don't pretty print `lambda` in lisp/python/etc. buffers.
(remove-hook 'prog-mode-hook 'esk-pretty-lambdas)

;; Don't let python mode guess the indent offset, always use the default (which
;; is 4 spaces).
(setq python-indent-guess-indent-offset nil)

;; Enable mouse support in terminal.
;;
;; Note `window-system` is `nil` when in a terminal, and "ns" when in a Cocoa
;; frame.
(if (not window-system)
    (progn
      (xterm-mouse-mode t)
      (global-set-key [mouse-4]
       '(lambda ()
          (interactive)
          (scroll-down 1)))
      (global-set-key [mouse-5]
       '(lambda ()
          (interactive)
          (scroll-up 1)))
      (defun track-mouse (e))
      (setq mouse-sel-mode t)))

;; Do not scroll dramatically when moving one line at a time.
(setq-default scroll-conservatively 1)
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 5)))

;; Display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

;; Associate file extensions to major modes.
(add-to-list 'auto-mode-alist '("\\.cljs$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.fountain$" . fountain-mode))
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))

;; Borrow textmate mode's line commenting behaviour.
(unless (fboundp 'comment-or-uncomment-region-or-line)
  (allow-line-as-region-for-function comment-or-uncomment-region))
(global-set-key (kbd "s-/") 'comment-or-uncomment-region-or-line)

;; Configuration for multi-web-mode.
(setq mweb-default-major-mode 'html-mode)
(setq mweb-filename-extensions '("html"))
(setq mweb-tags
  '((js-mode
     "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>"
     "</script>")
    (handlebars-mode
     "<script +\\(type=\"text/handlebars\"\\|language=\"handlebars\"\\)[^>]*>"
     "</script>")
    (coffee-mode
     "<script +\\(type=\"text/coffeescript\"\\|language=\"coffeescript\"\\)[^>]*>"
     "</script>")
    (css-mode
     "<style +type=\"text/css\"[^>]*>"
     "</style>")))
(multi-web-global-mode 1)

;; Set the right command key as control. This works in Cocoa Emacs, for the
;; most part, except OS X handles Cmd+Space (and related keybindings) before
;; Emacs can.
;; (setq mac-right-command-modifier 'control)

;; Some useful commands/keybindings for navigating within regions, particularly
;; quoted regions.
(defun contract-region ()
  (interactive)
  (er/expand-region -1))
(defun mark-outside-quotes ()
  (interactive)
  (er/mark-inside-quotes)
  (er/expand-region))
(defun goto-next-quote ()
  (interactive)
  (forward-char)
  (search-forward-regexp "[\"\|']")
  (backward-char))
(defun goto-previous-quote ()
  (interactive)
  (search-backward-regexp "[\"\|']"))
(global-set-key (kbd "M-[") 'contract-region)
(global-set-key (kbd "M-]") 'er/expand-region)
(global-set-key (kbd "C-;") 'er/mark-inside-quotes)
(global-set-key (kbd "C-'") 'mark-outside-quotes)
(global-set-key (kbd "M-'") 'goto-next-quote)
(global-set-key (kbd "M-;") 'goto-previous-quote)

;; Set up some keybindings for multiple-cursors convenience.
(global-set-key (kbd "s-[") 'mc/edit-beginnings-of-lines)
(global-set-key (kbd "s-]") 'mc/edit-ends-of-lines)
(global-set-key (kbd "s-\\") 'mc/edit-lines)
(global-set-key (kbd "s-{") 'mc/mark-previous-like-this)
(global-set-key (kbd "s-}") 'mc/mark-next-like-this)
(global-set-key (kbd "s-|") 'mc/mark-all-in-region)
(global-set-key (kbd "s-<mouse-1>") 'mc/add-cursor-on-click)

;; Set up bookmark (bm, https://github.com/joodland/bm). This option makes
;; `bm-toggle` toggle only between bookmarks in the *current* buffer.
(setq bm-cycle-all-buffers nil)

;; Set up buffer/project management using projectile and perspective.
(projectile-global-mode)
(persp-mode)
(flx-ido-mode)
(setq projectile-enable-caching t)
(setq projectile-require-project-root nil)
(setq projectile-globally-ignored-directories
      (append '("build"
                "eggs"
                "git-eggs"
                "develop-eggs"
                "node_modules"
                "log"
                "tmp")
              projectile-globally-ignored-directories))

;; Change the `projectile-switch-project-action` to a function that does not
;; prompt for a file to open when opening a project. Since perspectives are in
;; use, when switching to a new perspective for the project, this has the
;; effect of opening the project's perspective's local *scratch* buffer without
;; prompting for a file to open in the project.
(defun projectile-switch-project-noop (&optional arg)
  (run-hooks 'projectile-find-file-hook))
(projectile-persp-bridge projectile-switch-project-noop)
(setq projectile-switch-project-action 'projectile-switch-project-noop)

;; Open the "~/scratch/" project in this perspective. Note that
;; Projectile's default behaviour is to prompt for a file when
;; switching projects, and a file prompt breaks the boot sequence. But
;; this works because the prompt has been surpressed from the
;; `projectile-switch-project-action` override (above), which removes
;; the prompt.
(projectile-switch-project-by-name "~/scratch/")

;; A quick-and-dirty way to take the current buffer and make a new perspective
;; with just that buffer. Supersedes my old "maximize active window"
;; experiment!
(defun spawn-temp-perspective-with-current-buffer ()
  (interactive)
  (let ((buff (current-buffer)))
    (persp-switch "tmp")
    (persp-add-buffer buff)
    (switch-to-buffer buff)))

;; Set up some keybindings for navigating/working with buffers and
;; perspectives.
(global-set-key (kbd "C-`") 'switch-to-buffer)
(global-set-key (kbd "C--") 'switch-to-prev-buffer)
(global-set-key (kbd "C-=") 'switch-to-next-buffer)
(global-set-key (kbd "C-0") 'kill-this-buffer)
(global-set-key (kbd "M-`") 'persp-switch)
(global-set-key (kbd "M--") 'persp-prev)
(global-set-key (kbd "M-=") 'persp-next)
(global-set-key (kbd "M-0") 'persp-kill)
(global-set-key (kbd "M-<tab>") 'projectile-switch-project)
(global-set-key [(super t)] 'projectile-find-file)
(global-set-key [(super r)] 'projectile-grep)
(global-set-key (kbd "M-+") 'spawn-temp-perspective-with-current-buffer)
(dolist (project-info
         '(("s-1" "~/scratch/")
           ("s-9" "~/.dotfiles/")
           ))
  (let ((key  (nth 0 project-info))
        (path (nth 1 project-info)))
    (global-set-key (kbd key)
                    `(lambda ()
                       (interactive)
                       (projectile-persp-switch-project ,path)))))

;; Customize the mode line. Uses smart-mode-line and rich-minority.
(sml/setup)
(rich-minority-mode 1)

;; This empty list will stop smart-mode-line from making any space-saving
;; replacements of the buffer name.
(setq sml/replacer-regexp-list '())

;; This empty string will hide *every* minor mode.
(setq rm-excluded-modes "")

;; Disable line highlighting.
(remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)

;; Turn on line numbers in the gutter/fringe.
(global-linum-mode 1)
(setq linum-format " %d")

;; Show column numbers in the mode line, but not the line number.
(line-number-mode 0)
(setq column-number-mode t)

;; Make the left fringe visible and the right fringe invisible. The left fringe
;; is used for the git gutter. Note that since the right fringe is invisibile,
;; when lines run longer than the window's width, emacs will render a `$` at
;; the end of the line.
(setq-default left-fringe-width  2)
(setq-default right-fringe-width 0)

;; The left-fringe-width and right-fringe-width's set above do not apply to the
;; *scratch* buffer at boot. This will fix it.
(set-window-fringes (get-buffer-window) 1)

;; Do not show lines of the window that extend beyond the lines of the buffer.
(setq-default indicate-empty-lines nil)

;; Highlight the current line in the left fringe.
(hlinum-activate)

;; Uncomment the following to highlight the current line in all of the buffers,
;; not just the current buffer.
;; (setq linum-highlight-in-all-buffersp t)

;; Custom face for the line numbers in the left fringe. This changes the
;; font-size and font colour. TODO: Would be better to grab the foreground
;; colour from font-lock.
(set-face-attribute
 'linum nil :foreground "#66D9EF" :height 70)

;; Custom face for the highlighted line in the left fringe. This changes the
;; font-size and background colour. TODO: Would be better to grab the
;; background colour from font-lock.
(set-face-attribute
 'linum-highlight-face nil :background "#66D9EF" :height 70)

;; Turn on git-gutter-mode everywhere. Since the git-gutter-fringe package is
;; required (above), the git gutter will be inserted into the left fringe.
(global-git-gutter-mode +1)

;; Set the added, deleted, and modified markers in the git gutter. Since the
;; left fringe is set to only 2 pixels (see above), these markers show up as
;; thin, straight lines.
(fringe-helper-define
 'git-gutter-fr:added nil "XXXX" "XXXX" "XXXX" "XXXX" "XXXX" "XXXX" "XXXX")
(fringe-helper-define
 'git-gutter-fr:deleted nil "XXXX" "XXXX" "XXXX" "XXXX" "XXXX" "XXXX" "XXXX")
(fringe-helper-define
 'git-gutter-fr:modified nil "XXXX" "XXXX" "XXXX" "XXXX" "XXXX" "XXXX" "XXXX")

;; Setup for ansi-term.
(add-hook 'term-mode-hook
          (lambda ()
            (setq show-trailing-whitespace nil)))
(add-hook 'term-exec-hook
          (lambda ()
            (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)))

;; Turn off auto-fill mode everywhere. For markdown and org buffers, use visual
;; line mode.
(add-hook 'after-change-major-mode-hook 'turn-off-auto-fill)
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
(add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

;; Set the default fill column width to 79. This controls the column width when
;; using the `fill-column` command (bound to M-q).
(setq-default fill-column 79)

;; Turn on the line fill column line. Uses the `fill-column` variable set
;; above.
;; (fci-mode 1)
;; (setq fci-rule-width 1)
;; (setq fci-rule-color "slategray")

;; Turn off line wrapping. The `truncate-partial-width-windows` options is
;; needed for thisto work in vertically split windows.
(set-default 'truncate-lines t)
(setq truncate-partial-width-windows nil)

;; Olivetti mode configuration (for writing). Note that linum-mode must be
;; disabled when using olivetti-mode, since both try to set the margins of the
;; window and interfere with each other.
(defun turn-off-linum-mode () (linum-mode 0))
(setq olivetti-body-width 90)
(setq olivetti-hide-mode-line t)
(add-hook 'olivetti-mode-hook 'turn-off-linum-mode)

;; When highlight-indendation-mode is on, highlight indentations at every 2
;; columns.
(highlight-indentation-set-offset 2)

;; Additional key bindings for navigating buffers quickly.
(defun jump-many-lines-forward () (interactive) (next-line 15))
(defun jump-many-lines-backwards () (interactive) (previous-line 15))
(global-set-key (kbd "C-,") 'backward-paragraph)
(global-set-key (kbd "C-.") 'forward-paragraph)
(global-set-key (kbd "C-/") 'exchange-point-and-mark)
(global-set-key (kbd "M-p") 'jump-many-lines-backwards)
(global-set-key (kbd "M-n") 'jump-many-lines-forward)

;; Define aliases beginning with the `rectangle-` prefix for commonly used
;; rectangle operations.
(defalias 'rectangle-replace 'replace-rectangle)
(defalias 'rectangle-insert 'string-insert-rectangle)
(defalias 'rectangle-delete 'delete-rectangle)

;; Set indendation to 2 spaces for javascript and coffee script modes.
(setq js-indent-level 2)
(setq coffee-tab-width 2)

;; Disable automatic scss compilation.
(setq scss-compile-at-save nil)

;; Disable visible and audible notifications.
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; Move point from window to window using the Cmd and arrow keys.
(global-set-key (kbd "s-<right>") 'windmove-right)
(global-set-key (kbd "s-<left>") 'windmove-left)
(global-set-key (kbd "s-<up>") 'windmove-up)
(global-set-key (kbd "s-<down>") 'windmove-down)

;; Use org-indent-mode by default
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)

;; Display trailing whitespace.
(setq-default show-trailing-whitespace t)

;; automatically delete trailing whitespace
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;; To enable the menu bar, set menu-bar-mode to `t`.
;; (menu-bar-mode t)

;; Maximize the frame on startup.
(defun maximize-frame ()
  (interactive)
  (set-frame-parameter nil 'fullscreen 'maximized))
(maximize-frame)

;; Enable `dired-find-alternate-file`. If enabled, pressing the key `a` will
;; replace the existing dired buffer instead of starting a new buffer.
(put 'dired-find-alternate-file 'disabled nil)

(message "Finished loading .emacs...")
