;; -*- mode: emacs-lisp -*-

;; note: in order for flyspell to work, aspell must be installed
;; $ brew install aspell --lang=en
;; NOTE: still having issues with flyspell -- need to investigate

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

;; Add in your own as you wish:
(defvar my-packages
  '(bm
    clojure-mode
    coffee-mode
    color-theme
    color-theme-solarized
    ecb
    find-file-in-project
    find-things-fast
    gist
    haml-mode
    highlight-indentation
    idle-highlight-mode
    magit
    markdown-mode
    nrepl
    org
    paredit
    pyflakes
    pylint
    python-mode
    python-pep8
    ruby-mode
    scss-mode
    starter-kit
    stylus-mode
    textmate
    yaml-mode)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; read in PATH from .bash_profile
(if (not (getenv "TERM_PROGRAM"))
  (setenv "PATH"
    (shell-command-to-string "source $HOME/.bash_profile && printf $PATH")))

;; start a single emacs server
(server-start)

;; use a small font size for MBP Retina
(set-face-attribute 'default nil :height 100)

;; Set up the solarized colour theme.
(require 'color-theme)
(require 'color-theme-solarized)
(color-theme-solarized-dark)

;; Enable mouse support in terminal.
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                            (interactive)
                            (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                            (interactive)
                            (scroll-up 1)))
(defun track-mouse (e))
(setq mouse-sel-mode t)

;; Enable cua mode, but only for rectangles.
;; (C-RET will start a rectangular selection.)
(setq cua-enable-cua-keys nil)
(cua-mode t)

;; Display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

;; Use textmate minor mode, but don't use textmate's 'textmate-goto-file
;; binding. Instead, use find-things-fast for searching projects.
(require 'textmate)
(define-key *textmate-mode-map* [(super t)] nil)
(textmate-mode)
(global-set-key [(super t)] 'ftf-find-file)

;; Set up ECB (Emacs Code Browser).
(require 'ecb-autoloads)
(global-set-key (kbd "C-1") 'ecb-toggle-ecb-windows)
(global-set-key (kbd "C-2") 'ecb-goto-window-directories)
(global-set-key (kbd "C-3") 'ecb-goto-window-edit1)
(global-set-key (kbd "C-4") 'ecb-goto-window-edit2)
(setq
 ecb-layout-name "left13"
 ecb-options-version "2.40"
 ecb-show-sources-in-directories-buffer (quote always)
 ecb-source-file-regexps (quote ((".*" ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(pyc\\|elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\)$\\)\\)") ("^\\.\\(emacs\\|gnus\\)$"))))
 ecb-source-path
  (quote
   (("~" "~")
    ))
 ecb-split-edit-window-after-start (quote horizontal)
 ecb-tip-of-the-day nil
 ecb-tree-buffer-style (quote ascii-no-guides)
 ecb-tree-indent 0
 ecb-tree-make-parent-node-sticky nil
 ecb-vc-enable-support t
 ecb-windows-width 0.20)
(ecb-minor-mode)

;; Set up bookmark (bm, https://github.com/joodland/bm).
(require 'bm)
(setq bm-cycle-all-buffers nil)

(defun bm-navigate-all (direction)
  (let ((is-cycling-all bm-cycle-all-buffers))
    (setq bm-cycle-all-buffers t)
    (funcall direction)
    (setq bm-cycle-all-buffers is-cycling-all)
    ))

(defun bm-previous-all ()
  "Navigate the bookmarks across all buffers in the reverse
direction. This temporarily ignores the `bm-cycle-all-buffers`
option."
  (interactive)
  (bm-navigate-all 'bm-previous))

(defun bm-next-all ()
  "Navigate the bookmarks across all buffers in the forward
direction. This temporarily ignores the `bm-cycle-all-buffers`
option."
  (interactive)
  (bm-navigate-all 'bm-next))

(global-set-key (kbd "M-0") 'bm-toggle)
(global-set-key (kbd "M--") 'bm-previous)
(global-set-key (kbd "M-=") 'bm-next)
(global-set-key (kbd "M-_") 'bm-previous-all)
(global-set-key (kbd "M-+") 'bm-next-all)

;; Change the behaviour of M-d so that its use does not place removed text onto
;; the kill ring.
(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(global-set-key (kbd "M-d") 'delete-word)

;; Change the behaviour of of M-DEL so that its use does not place the removed
;; text onto the kill ring.
(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(global-set-key (read-kbd-macro "<M-DEL>") 'backward-delete-word)

(defun flush-buffer-history ()
  "Clear the list of recent files that were opened. When this
list is cleared, ido's buffer list will no longer list recently
opened buffers."
  (interactive)
  (setq recentf-list '()))

;; Window management
(defvar resize-mode-keymap (make-keymap) "resize mode keymap")
(define-key resize-mode-keymap (kbd "<left>") 'shrink-window-horizontally)
(define-key resize-mode-keymap (kbd "<right>") 'enlarge-window-horizontally)
(define-key resize-mode-keymap (kbd "<down>") 'shrink-window)
(define-key resize-mode-keymap (kbd "<up>") 'enlarge-window)
(define-minor-mode resize-mode "something"
  :group 'window-management
  :init-value nil
  :lighter " resize"
  :keymap resize-mode-keymap)

;; Buffer management
(global-set-key (kbd "C-`") 'switch-to-buffer)
(global-set-key (kbd "C--") 'switch-to-prev-buffer)
(global-set-key (kbd "C-=") 'switch-to-next-buffer)
(global-set-key (kbd "C-0") 'kill-buffer)

;; Disable line highlighting.
(remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)

;; use clojure-mode to edit ClojureScript files
(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode))

;; nrepl
(require 'nrepl)
(setq nrepl-popup-stacktraces nil)
(add-hook 'nrepl-mode-hook
          (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'nrepl-interaction-mode-hook
          'nrepl-turn-on-eldoc-mode)

;; Setup for ansi-term.
(add-hook 'term-mode-hook
          (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'term-exec-hook
          (lambda () (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)))

;; Turn off line wrapping.
(set-default 'truncate-lines t)
(setq truncate-partial-width-windows nil) ;; This is needed to work for
                                          ;; vertically split windows.

;; Set the default fill column width to 79.
(setq-default fill-column 79)

;; indentation highlighting
(require 'highlight-indentation)
(setq-default highlight-indent-offset 4)

;; Keybinding for phrase highlighting.
(global-set-key (kbd "M-p") 'highlight-phrase)

;; Additional key bindings for navigating buffers quickly.
(global-set-key (kbd "C-,") 'backward-paragraph)
(global-set-key (kbd "C-.") 'forward-paragraph)
(global-set-key (kbd "C-/") 'exchange-point-and-mark)

(defun coffee-custom ()
  (make-local-variable 'tab-width)
  (set 'tab-width 2)
  )
(add-hook 'coffee-mode-hook 'coffee-custom)

;; disable automatic scss compilation
(setq scss-compile-at-save nil)

;; configure the file extensions used by markdown mode
(setq auto-mode-alist
  (cons '("\\.md" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
    (cons '("\\.mdown" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
  (cons '("\\.markdown" . markdown-mode) auto-mode-alist))

;; Use visual line mode by default for markdown files.
(add-hook 'markdown-mode-hook 'turn-off-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

;; Use visual line mode by default for org files.
(add-hook 'org-mode-hook 'turn-off-auto-fill)
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)

;; Disable the visible notification (note: this seems to activate the audible
;; bell).
(setq visible-bell nil)

;; reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))

;; move point from window to window using shift and the arrow keys
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Use org-indent-mode by default
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)

;; display trailing whitespace
(setq-default show-trailing-whitespace t)

;; automatically delete trailing whitespace
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;; do not scroll dramatically when moving one line at a time
(setq-default scroll-conservatively 1)
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 5)))

;; Enable the menu bar
(menu-bar-mode t)

;; Show column numbers
(setq column-number-mode t)

;; Setup the frame.
(split-window-right)
(split-window-right)
(balance-windows)
(ns-toggle-fullscreen)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40"))
