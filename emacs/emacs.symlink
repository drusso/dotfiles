;; -*- mode: emacs-lisp -*-

;; note: in order for flyspell to work, aspell must be installed
;; $ brew install aspell --lang=en
;; NOTE: still having issues with flyspell -- need to investigate

(add-to-list 'load-path "~/.emacs.d/downloads")

(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

;; Add in your own as you wish:
(defvar my-packages '(starter-kit color-theme color-theme-solarized
                      clojure-mode find-file-in-project gist paredit
                      idle-highlight-mode magit org org-magit pyflakes
                      pylint python-mode python-pep8 ruby-mode yaml-mode
                      markdown-mode textmate find-things-fast coffee-mode
                      color-theme-ir-black)
                      vc vc-darcs ibuffer-vc
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; read in PATH from .bash_profile
(if (not (getenv "TERM_PROGRAM"))
  (setenv "PATH"
    (shell-command-to-string "source $HOME/.bash_profile && printf $PATH")))

;; start a single emacs server
(server-start)

;; make the right command key control
(setq mac-right-command-modifier 'ctrl)

(require 'color-theme)
(require 'color-theme-solarized)
(require 'color-theme-ir-black)
(setq color-theme-is-global nil)

(color-theme-solarized-dark)

(add-hook 'after-make-frame-functions
          (lambda (frame)
             (select-frame frame)
             (if (window-system frame)
                 (color-theme-solarized-dark)
                 (color-theme-ir-black))))

;; Enable mouse support in terminal.
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                            (interactive)
                            (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                            (interactive)
                            (scroll-up 1)))
(defun track-mouse (e))
(setq mouse-sel-mode t)

;; Enable cua mode, but only for rectangles.
;; (C-RET will start a rectangular selection.)
(setq cua-enable-cua-keys nil)
(cua-mode t)

;; enable textmate minor mode
(textmate-mode)

;; Keybindings for window resize.
(global-set-key (kbd "<C-S-left>") 'shrink-window-horizontally)
(global-set-key (kbd "<C-S-right>") 'enlarge-window-horizontally)

;; Keybindings for navigating buffers.
(global-set-key (kbd "C-`") 'ibuffer)
(global-set-key (kbd "C-1") 'switch-to-prev-buffer)
(global-set-key (kbd "C-2") 'switch-to-next-buffer)
(global-set-key (kbd "C-0") 'kill-buffer)

;; Customize ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            ;; Turn on ibuffer-vc (groups by git project).
            (ibuffer-vc-set-filter-groups-by-vc-root)
            (ibuffer-do-sort-by-alphabetic)
            ;; Turn on isearch for quick buffer lookup.
            (isearch-forward)))



(require 'ibuffer-git)
(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 30 18 :left :elide) " "
              (git-status 8 8 :left) " "
              filename-and-process)))

;; Disable line highlighting.
(remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)

;; use clojure-mode to edit ClojureScript files
(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode))

;; configure the file extensions used by markdown mode
(setq auto-mode-alist
  (cons '("\\.md" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
    (cons '("\\.mdown" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
  (cons '("\\.markdown" . markdown-mode) auto-mode-alist))

;; Use visual line mode by default for markdown files.
(add-hook 'markdown-mode-hook 'turn-off-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

;; Use visual line mode by default for org files.
(add-hook 'org-mode-hook 'turn-off-auto-fill)
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)

;; reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))

;; move point from window to window using shift and the arrow keys
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Use org-indent-mode by default
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)

;; display trailing whitespace
(setq-default show-trailing-whitespace t)

;; automatically delete trailing whitespace
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;; do not scroll dramatically when moving one line at a time
(setq-default scroll-conservatively 1)
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 5)))

;; highlight 80+ for Python
(add-hook 'python-mode-hook (lambda () (highlight-80+-mode)))

;; Enable the menu bar
(menu-bar-mode t)

;; Show column numbers
(setq column-number-mode t)

;; Switch to prev/ next buffer using OS X keybindings
(global-set-key (kbd "s-{") 'switch-to-prev-buffer)
(global-set-key (kbd "s-}") 'switch-to-next-buffer)

;; misc functions, from emacs-prelude
;; https://github.com/bbatsov/emacs-prelude/blob/master/modules/prelude-core.el

(defun prelude-google ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))

(defun prelude-swap-windows ()
  "If you have 2 windows, it swaps them."
  (interactive)
  (if (/= (count-windows) 2)
      (message "You need exactly 2 windows to do this.")
    (let* ((w1 (first (window-list)))
           (w2 (second (window-list)))
           (b1 (window-buffer w1))
           (b2 (window-buffer w2))
           (s1 (window-start w1))
           (s2 (window-start w2)))
      (set-window-buffer w1 b2)
      (set-window-buffer w2 b1)
      (set-window-start w1 s2)
      (set-window-start w2 s1)))
  (other-window 1))
